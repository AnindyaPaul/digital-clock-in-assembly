{"name":"Digital Clock in assembly language","tagline":"Digital Clock developed in assembly language.","body":"Digital Clock in assembly language is developed as an educational project to learn assembly language in more detail and have practical experience.\r\n\r\n## Features\r\n1. The clock shows the time of the computer system.\r\n2. It shows hours, minutes and seconds.\r\n3. It uses 12 hour format.\r\n4. It is developed in VGA graphics with 320x200 resolution.\r\n5. It is displayed in a classy, stylish and attractive font.\r\n6. The interface is simplistic with white text on black background.\r\n\r\n## Screenshot\r\n![Digital Clock in assembly home screen](http://i.imgur.com/xTWO9mm.jpg)\r\n\r\n## How to use\r\n- Download [TASM for windows](http://sourceforge.net/projects/tasmforwindows/) and install.\r\n- Build the program and run it.\r\n\r\n## How it works\r\n1. First we define two macros for later uses. One for drawing rows and another for drawing columns. We send the row, column and color values as parameters for the macros.\r\n2. We then set the video mode for our display operation.\r\n3. Since we are going to use 1CH in order to continuously refresh the screen, we set the interrupt vector for 1CH.\r\n4. The routine which will be executed each time the 1CH interrupt is generated, is defined.\r\n5. In the routine, we first generate interrupt to get the current time from the system.\r\n6. As the time is returned into the registers, we use those values to convert that time to a string for ease in later tasks.\r\n7. We define ten functions each for displaying each digit from 0 to 9.\r\n8. Each digit is created using the macros defined earlier. We draw rows and columns for the digits accordingly.\r\n9. Before a digit is printed on the screen, we first clear the screen since it will have the previously displayed digit on the screen.\r\n10. As the screen keeps getting refreshed continuously, the program waits for a key to be pressed in order to terminate the program.\r\n11. As a key is pressed the display is set back to text mode and the program terminates and returns control to DOS.\r\n\r\n## Interrupts used in the program\r\n### INT 10H:\r\nThis interrupt is used to execute graphics based routines.  \r\nAH = 00H; set graphics mode  \r\nAL = 13H; graphics mode VGA 320 x 200 256 color  \r\nINT 10H  \r\n  \r\nAH = 0CH; draw pixel  \r\nAL = color  \r\nBH = page  \r\nCX = column  \r\nDX = row  \r\nINT 10H  \r\n### INT 16H:\r\nThe bios interrupt 16H routine is the key-board driver. In order to take an input from the keyboard we have used this interrupt where the function value 00H was stored in AH.  \r\nAH = 00H; wait for a key press  \r\nINT 16H  \r\n### INT 21H:\r\nThis is a DOS interrupt. It is used to request different DOS function. The function value is stored in AH. In our program we have used three functions.  \r\nAL = interrupt number  \r\nAH = 35H; gets interrupt vector stored in AL  \r\nINT 21H; returns the address to ES:BX  \r\n  \r\nAL = interrupt number  \r\nAH = 25H; sets interrupt vector stored in AL  \r\nINT 21H; sets the vector to DS:DX  \r\n  \r\nAH = 2CH; gets the current time, CH = hour, CL = minute, DH = second  \r\nINT 21H;  \r\n  \r\nAH = 4CH; returns program to DOS  \r\nINT 21H;  \r\n\r\n### INT 1CH:\r\nThe 1CH interrupt is automatically generated by an internal clock circuit. It is generated about 18.2 times per second on an average. We can define a routine for this interrupt which will be executed every time the interrupt is generated. Since we need to continuously refresh the display, we simply define a routine to refresh the display.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}